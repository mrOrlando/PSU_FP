-- ========================================================================
--  Лабораторная работа №3
--  Программирование пользовательских функций
-- ========================================================================

-- для использования функции sort
import Data.List

--1. Функция max3, по трем целым возвращающая наибольшее из них.
max3 a b c = maximum [a,b,c]

--2. Функция min3, по трем целым возвращающая наименьшее из них.
min3 a b c = minimum [a,b,c]

--3. Функция sort2, по двум целым возвращающая пару,
--в которой наименьшее из них стоит на первом месте,
--а наибольшее – на втором.
sort2 a b
	| a > b = (b,a)
	| otherwise = (a,b)

--4. Функция bothTrue :: Bool -> Bool -> Bool,
--которая возвращает True тогда и только тогда,
--когда оба ее аргумента будут равны True.
bothTrue :: Bool -> Bool -> Bool
bothTrue True True = True
bothTrue _    _    = False

--5. Функция solve2 :: Double -> Double -> (Bool, Double),
--которая по двум числам, представляющим собой коэффициенты
--линейного уравнения ax + b = 0, возвращает пару,
--первый элемент которой равен True, если решение существует
--и False в противном случае;
--при этом второй элемент равен либо значению корня, либо 0.0.
solve2 :: Double -> Double -> (Bool, Double)
--(True, result) | (False, 0.0)
solve2 a b
	| a == 0 = (False, 0.0)
	| otherwise = (True, -b / a)

--6. Функция isParallel, возвращающая True, если два отрезка,
--концы которых задаются в аргументах функции, параллельны
--(или лежат на одной прямой). Например, значение выражения
--isParallel (1, 1) (2, 2) (2, 0) (4, 2) должно быть равно True,
--поскольку отрезки (1, 1) - (2, 2) и (2, 0) - (4, 2) параллельны.
isParallel (x1,y1) (x2,y2) (a1,b1) (a2,b2)
	| (a2-a1)*(y2-y1) - (b2-b1)*(x2-x1) == 0 = True
	| otherwise = False

{-
	> isParallel (1, 1) (2, 2) (2, 0) (4, 2)
	True
	> isParallel (0, 0) (4, 0) (0, 2) (4, 2)
	True
-}

--7. Функция isIncluded, аргументами которой служат параметры двух
--окружностей на плоскости (координаты центров и радиусы);
--функция возвращает True, если вторая окружность целиком
--содержится внутри первой.
isIncluded (x1,y1,r1) (x2,y2,r2)
	| sqrt ( (x1-x2)^2 + (y1-y2)^2 ) <= r1-r2 = True
	| otherwise = False

{-
	> isIncluded (0,0,5) (0,0,4)
	True
	> isIncluded (0,0,5) (0,0,10)
	False
	> isIncluded (0,0,5) (2,2,1)
	True
-}

--8. Функция isRectangular, принимающая в качестве параметров
--координаты трех точек на плоскости, и возвращающая True,
--если образуемый ими треугольник – прямоугольный.
isRectangular (x1,y1) (x2,y2) (x3,y3)
	| (x2-x1)*(x3-x2) + (y2-y1)*(y3-y2) == 0 = True
	| (x2-x1)*(x3-x1) + (y2-y1)*(y3-y1) == 0 = True 
	| (x2-x3)*(x1-x3) + (y2-y3)*(y1-y3) == 0 = True
	| otherwise = False

{-
	> isRectangular (0,0) (0,6) (10,0)
	True
	> isRectangular (1,2) (0,5) (3,0)
	False
-}

--9. Функция isTriangle, определяющая, можно ли из отрезков
--с заданными длинами x, y и z построить треугольник.
--Сумма длин двух сторон должна быть больше третей стороны.
isTriangle x y z
	| (x + y > z) && (z + y > x) && (x + z > y) = True
	| otherwise = False

{-
	> isTriangle 1 2 3
	False
	> isTriangle 5 5 5
	True
	> isTriangle 6 8 10
	True
-}

--10. Функция isSorted, принимающая на вход три числа
--возвращает True, если они упорядочены по возрастанию.
isSorted a b c
	| [a,b,c] == ( sort [a,b,c] ) = True
	| otherwise = False